Description: Purify: Fix header checks and input handling
 * Add parantheses to fix checks for headers.
 * Accept folder names entered without trailing slash.
 * Check also files with uppercase extensions.
 * Rename purify to bsnes-purify in help output.
Author: Tobias Hansen <tobias.han@gmx.de>

--- a/purify/purify.cpp
+++ b/purify/purify.cpp
@@ -43,7 +43,7 @@
 bool Application::loadFile(const string &filename, string &suffix, uint8_t *&data, unsigned &size) {
   print("-> ", notdir(filename), "\n");
 
-  if(filename.endswith(".zip")) {
+  if(filename.iendswith(".zip")) {
     zip archive;
     if(archive.open(filename) == false) return print("* failed to open archive\n"), false;
     if(archive.file.size() != 1) return print("* file count (", archive.file.size(), ") incorrect\n"), false;
@@ -60,7 +60,7 @@
 //<famicom>
 
 void Application::scanFamicom(const string &filename, uint8_t *data, unsigned size) {
-  if(size & 255 != 16) return print("* ", filename, " missing iNES header\n");
+  if((size & 255) != 16) return print("* ", filename, " missing iNES header\n");
 
   string sha256 = nall::sha256(data, size);
   database.print(sha256, "{}");
@@ -72,7 +72,7 @@
 }
 
 void Application::outputFamicom(const string &filename, uint8_t *data, unsigned size) {
-  if(size & 255 != 16) return print("* ", filename, " missing iNES header\n");
+  if((size & 255) != 16) return print("* ", filename, " missing iNES header\n");
 
   string markup = FamicomCartridge(data, size).markup;
   string path = {target, nall::basename(filename), ".fc/"};
@@ -88,7 +88,7 @@
 //<superFamicom>
 
 void Application::scanSuperFamicom(const string &filename, uint8_t *data, unsigned size) {
-  if(size & 32767 == 512) size -= 512, data += 512;
+  if((size & 32767) == 512) size -= 512, data += 512;
 
   string sha256 = nall::sha256(data, size);
   database.print(sha256, "{}");
@@ -97,7 +97,7 @@
 }
 
 void Application::outputSuperFamicom(const string &filename, uint8_t *data, unsigned size) {
-  if(size & 32767 == 512) size -= 512, data += 512;
+  if((size & 32767) == 512) size -= 512, data += 512;
 
   string markup = SuperFamicomCartridge(data, size).markup;
   string path = {target, nall::basename(filename), ".sfc/"};
@@ -225,11 +225,11 @@
     unsigned size;
     if(loadFile({source, filename}, suffix, data, size) == false) continue;
 
-    if(suffix == "nes" || suffix == "fc") outputFamicom(filename, data, size);
-    if(suffix == "sfc" || suffix == "smc") outputSuperFamicom(filename, data, size);
-    if(suffix == "gb") outputGameBoy(filename, data, size);
-    if(suffix == "gbc" || suffix == "gbb") outputGameBoyColor(filename, data, size);
-    if(suffix == "gba") outputGameBoyAdvance(filename, data, size);
+    if(suffix.iequals("nes") || suffix.iequals("fc")) outputFamicom(filename, data, size);
+    if(suffix.iequals("sfc") || suffix.iequals("smc")) outputSuperFamicom(filename, data, size);
+    if(suffix.iequals("gb")) outputGameBoy(filename, data, size);
+    if(suffix.iequals("gbc") || suffix.iequals("gbb")) outputGameBoyColor(filename, data, size);
+    if(suffix.iequals("gba")) outputGameBoyAdvance(filename, data, size);
 
     delete[] data;
   }
@@ -238,21 +238,29 @@
 int main(int argc, char **argv) {
   Application *application = new Application;
 
+  string source;
+  if(argc == 4) {
+    source = argv[2];
+    if(!source.endswith("/")) source.append("/");
+  }
+
   if(argc == 4 && cstring{argv[1]} == "scan") {
-    application->source = argv[2];
+    application->source = source;
     application->target = argv[3];
     application->scanDirectory();
   }
 
   else if(argc == 4 && cstring{argv[1]} == "output") {
-    application->source = argv[2];
-    application->target = argv[3];
+    application->source = source;
+    string target = argv[3];
+    if(!target.endswith("/")) target.append("/");
+    application->target = target;
     application->outputDirectory();
   }
 
   else {
-    print("purify v01\n");
-    print("usage: purify [mode] source target\n\n");
+    print("bsnes-purify v01\n");
+    print("usage: bsnes-purify [mode] source target\n\n");
     print("modes:\n");
     print("  scan   - create database\n");
     print("  output - create folder images\n");
